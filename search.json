[{"path":"https://brebrown6101.github.io/UWBiost561/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 UWBiost561 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/articles/UWBiost561.html","id":"generating-a-graph-with-a-maximal-partial-clique","dir":"Articles","previous_headings":"","what":"Generating a graph with a maximal partial clique","title":"Demo","text":"Let’s first create random adjacency matrix predefined number nodes (n), predefined fraction nodes clique (clique_fraction), predefined edge density within clique (edge_density).","code":"n <- 10 clique_fraction <- 0.6 clique_edge_density <- 0.7 #generate partial clique graph <- generate_partial_clique(n, clique_fraction, clique_edge_density, seed = NULL) adj_mat <- graph$adj_mat print(adj_mat) ##       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] ##  [1,]    1    0    0    0    0    0    0    0    0     0 ##  [2,]    0    1    1    0    0    1    1    1    0     0 ##  [3,]    0    1    1    0    0    0    1    0    0     0 ##  [4,]    0    0    0    1    0    0    0    0    0     0 ##  [5,]    0    0    0    0    1    0    0    0    0     0 ##  [6,]    0    1    0    0    0    1    1    1    1     0 ##  [7,]    0    1    1    0    0    1    1    1    0     0 ##  [8,]    0    1    0    0    0    1    1    1    1     0 ##  [9,]    0    0    0    0    0    1    0    1    1     0 ## [10,]    0    0    0    0    0    0    0    0    0     1"},{"path":"https://brebrown6101.github.io/UWBiost561/articles/UWBiost561.html","id":"computing-the-maximal-partial-clique","dir":"Articles","previous_headings":"","what":"Computing the maximal partial clique","title":"Demo","text":"creating graph contains partial clique, ’ll compute clique index edge density maximal partial clique adjacency matrix. ’ll designate alpha level maximal partial clique must edge density equal greater considered maximal partial clique.","code":"alpha <- 0.9 #compute maximal partial clique compute_maximal_partial_clique1(adj_mat, alpha, verbose = FALSE) ## $clique_idx ## [1] 2 6 7 8 ##  ## $edge_density ## [1] 1"},{"path":"https://brebrown6101.github.io/UWBiost561/articles/UWBiost561.html","id":"simulation-study","dir":"Articles","previous_headings":"","what":"Simulation Study","title":"Demo","text":"Included package also simulation study can ran test validity compute_maximal_partial_clique function increasing levels alpha n. amount trials ran level specified","code":"maximal_partial_clique_sim(trials = 2, alpha_vec = c(0.5, 0.6, 0.7), n_vec = c(10, 20, 30)) ## [1] \"Value of alpha: 0.5 Value of n: 10\" ## [1] \"Working on trial: 1\" ## *[1] \"Working on trial: 2\" ## *[1] \"Value of alpha: 0.6 Value of n: 20\" ## [1] \"Working on trial: 1\" ## *[1] \"Working on trial: 2\" ## *[1] \"Value of alpha: 0.7 Value of n: 30\" ## [1] \"Working on trial: 1\" ## *[1] \"Working on trial: 2\" ## * ## $`alpha:0.5n:10` ## $`alpha:0.5n:10`$`Trial: 1` ## $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1` ## $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$status ## [1] \"completed\" ##  ## $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$clique_size ## [1] 10 ##  ## $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$edge_density ## [1] 0.7111111 ##  ## $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$valid ## [1] TRUE ##  ## $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$time ## NULL ##  ##  ##  ## $`alpha:0.5n:10`$`Trial: 2` ## $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1` ## $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$status ## [1] \"completed\" ##  ## $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$clique_size ## [1] 10 ##  ## $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$edge_density ## [1] 0.7111111 ##  ## $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$valid ## [1] TRUE ##  ## $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$time ## NULL ##  ##  ##  ##  ## $`alpha:0.6n:20` ## $`alpha:0.6n:20`$`Trial: 1` ## $`alpha:0.6n:20`$`Trial: 1`$`Implementation: 1` ## $`alpha:0.6n:20`$`Trial: 1`$`Implementation: 1`$status ## [1] \"completed\" ##  ## $`alpha:0.6n:20`$`Trial: 1`$`Implementation: 1`$clique_size ## [1] 20 ##  ## $`alpha:0.6n:20`$`Trial: 1`$`Implementation: 1`$edge_density ## [1] 0.7263158 ##  ## $`alpha:0.6n:20`$`Trial: 1`$`Implementation: 1`$valid ## [1] TRUE ##  ## $`alpha:0.6n:20`$`Trial: 1`$`Implementation: 1`$time ## NULL ##  ##  ##  ## $`alpha:0.6n:20`$`Trial: 2` ## $`alpha:0.6n:20`$`Trial: 2`$`Implementation: 1` ## $`alpha:0.6n:20`$`Trial: 2`$`Implementation: 1`$status ## [1] \"completed\" ##  ## $`alpha:0.6n:20`$`Trial: 2`$`Implementation: 1`$clique_size ## [1] 20 ##  ## $`alpha:0.6n:20`$`Trial: 2`$`Implementation: 1`$edge_density ## [1] 0.7263158 ##  ## $`alpha:0.6n:20`$`Trial: 2`$`Implementation: 1`$valid ## [1] TRUE ##  ## $`alpha:0.6n:20`$`Trial: 2`$`Implementation: 1`$time ## NULL ##  ##  ##  ##  ## $`alpha:0.7n:30` ## $`alpha:0.7n:30`$`Trial: 1` ## $`alpha:0.7n:30`$`Trial: 1`$`Implementation: 1` ## $`alpha:0.7n:30`$`Trial: 1`$`Implementation: 1`$status ## [1] \"completed\" ##  ## $`alpha:0.7n:30`$`Trial: 1`$`Implementation: 1`$clique_size ## [1] 30 ##  ## $`alpha:0.7n:30`$`Trial: 1`$`Implementation: 1`$edge_density ## [1] 0.7264368 ##  ## $`alpha:0.7n:30`$`Trial: 1`$`Implementation: 1`$valid ## [1] TRUE ##  ## $`alpha:0.7n:30`$`Trial: 1`$`Implementation: 1`$time ## NULL ##  ##  ##  ## $`alpha:0.7n:30`$`Trial: 2` ## $`alpha:0.7n:30`$`Trial: 2`$`Implementation: 1` ## $`alpha:0.7n:30`$`Trial: 2`$`Implementation: 1`$status ## [1] \"completed\" ##  ## $`alpha:0.7n:30`$`Trial: 2`$`Implementation: 1`$clique_size ## [1] 30 ##  ## $`alpha:0.7n:30`$`Trial: 2`$`Implementation: 1`$edge_density ## [1] 0.7264368 ##  ## $`alpha:0.7n:30`$`Trial: 2`$`Implementation: 1`$valid ## [1] TRUE ##  ## $`alpha:0.7n:30`$`Trial: 2`$`Implementation: 1`$time ## NULL"},{"path":"https://brebrown6101.github.io/UWBiost561/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Breanna Brown. Author, maintainer.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Brown B (2025). UWBiost561: Generate Partial Clique Compute Maximal Partial Clique. R package version 0.0.0.9000, https://brebrown6101.github.io/UWBiost561/.","code":"@Manual{,   title = {UWBiost561: Generate Partial Clique and Compute Maximal Partial Clique},   author = {Breanna Brown},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://brebrown6101.github.io/UWBiost561/}, }"},{"path":"https://brebrown6101.github.io/UWBiost561/index.html","id":"purpose","dir":"","previous_headings":"","what":"Generate Partial Clique and Compute Maximal Partial Clique","title":"Generate Partial Clique and Compute Maximal Partial Clique","text":"package centered around development partial cliques identification largest partial cliques finite graph representations. URL GitHub (.e. source code) : https://github.com/brebrown6101/UWBiost561 URL PkgDown webpage : file:///Users/breannabrown/Desktop/BIOST561/UWBiost561/docs/index.html","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/index.html","id":"how-to-install","dir":"","previous_headings":"","what":"How to install","title":"Generate Partial Clique and Compute Maximal Partial Clique","text":"package called UWBiost561. install, run following code (R): Upon completion, can run following code (R):","code":"library(devtools) devtools::install_github(\"brebrown6101/UWBiost561\") library(UWBiost561)"},{"path":"https://brebrown6101.github.io/UWBiost561/index.html","id":"session-info","dir":"","previous_headings":"","what":"Session Info","title":"Generate Partial Clique and Compute Maximal Partial Clique","text":"package developed following environment","code":"devtools::session_info() ─ Session info ──────────────────────────────────────────────────────────────────────────────────────────────────────  setting  value  version  R version 4.4.1 (2024-06-14)  os       macOS 15.2  system   aarch64, darwin20  ui       RStudio  language (EN)  collate  en_US.UTF-8  ctype    en_US.UTF-8  tz       America/Los_Angeles  date     2025-06-09  rstudio  2024.12.0+467 Kousa Dogwood (desktop)  pandoc   3.2 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/tools/aarch64/ (via rmarkdown)  quarto   1.5.57 @ /Applications/RStudio.app/Contents/Resources/app/quarto/bin/quarto  ─ Packages ──────────────────────────────────────────────────────────────────────────────────────────────────────────  ! package     * version    date (UTC) lib source    bookdown      0.42       2025-01-07 [1] CRAN (R 4.4.1)    brio          1.1.5      2024-04-24 [1] CRAN (R 4.4.1)    bslib         0.8.0      2024-07-29 [1] CRAN (R 4.4.0)    cachem        1.1.0      2024-05-16 [1] CRAN (R 4.4.0)    callr         3.7.6      2024-03-25 [1] CRAN (R 4.4.0)    cli           3.6.3      2024-06-21 [1] CRAN (R 4.4.0)    commonmark    1.9.2      2024-10-04 [1] CRAN (R 4.4.1)    curl          6.2.2      2025-03-24 [1] CRAN (R 4.4.1)    desc          1.4.3      2023-12-10 [1] CRAN (R 4.4.1)    devtools      2.4.5      2022-10-11 [1] CRAN (R 4.4.0)    digest        0.6.37     2024-08-19 [1] CRAN (R 4.4.1)    ellipsis      0.3.2      2021-04-29 [1] CRAN (R 4.4.1)    evaluate      1.0.3      2025-01-10 [1] CRAN (R 4.4.1)    fastmap       1.2.0      2024-05-15 [1] CRAN (R 4.4.0)    fs            1.6.5      2024-10-30 [1] CRAN (R 4.4.1)    glue          1.8.0      2024-09-30 [1] CRAN (R 4.4.1)    htmltools     0.5.8.1    2024-04-04 [1] CRAN (R 4.4.0)    htmlwidgets   1.6.4      2023-12-06 [1] CRAN (R 4.4.0)    httpuv        1.6.15     2024-03-26 [1] CRAN (R 4.4.0)    jquerylib     0.1.4      2021-04-26 [1] CRAN (R 4.4.0)    jsonlite      1.8.9      2024-09-20 [1] CRAN (R 4.4.1)    knitr       * 1.49       2024-11-08 [1] CRAN (R 4.4.1)    later         1.4.1      2024-11-27 [1] CRAN (R 4.4.1)    lifecycle     1.0.4      2023-11-07 [1] CRAN (R 4.4.0)    magrittr      2.0.3      2022-03-30 [1] CRAN (R 4.4.0)    memoise       2.0.1      2021-11-26 [1] CRAN (R 4.4.0)    mime          0.12       2021-09-28 [1] CRAN (R 4.4.0)    miniUI        0.1.1.1    2018-05-18 [1] CRAN (R 4.4.0)    pillar        1.10.1     2025-01-07 [1] CRAN (R 4.4.1)    pkgbuild      1.4.7      2025-03-24 [1] CRAN (R 4.4.1)    pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 4.4.0)    pkgload       1.4.0      2024-06-28 [1] CRAN (R 4.4.0)    png           0.1-8      2022-11-29 [1] CRAN (R 4.4.1)    prettyunits   1.2.0      2023-09-24 [1] CRAN (R 4.4.0)    processx      3.8.5      2025-01-08 [1] CRAN (R 4.4.1)    profvis       0.4.0      2024-09-20 [1] CRAN (R 4.4.1)    promises      1.3.2      2024-11-28 [1] CRAN (R 4.4.1)    ps            1.8.1      2024-10-28 [1] CRAN (R 4.4.1)    purrr         1.0.2      2023-08-10 [1] CRAN (R 4.4.0)    R6            2.5.1      2021-08-19 [1] CRAN (R 4.4.0)    rcmdcheck     1.4.0      2021-09-27 [1] CRAN (R 4.4.0)    Rcpp          1.0.14     2025-01-12 [1] CRAN (R 4.4.1)    remotes       2.5.0      2024-03-17 [1] CRAN (R 4.4.0)    rlang         1.1.4      2024-06-04 [1] CRAN (R 4.4.0)    rmarkdown     2.29       2024-11-04 [1] CRAN (R 4.4.1)    roxygen2      7.3.2      2024-06-28 [1] CRAN (R 4.4.0)    rprojroot     2.0.4      2023-11-05 [1] CRAN (R 4.4.1)    rsconnect     1.3.4      2025-01-22 [1] CRAN (R 4.4.1)    rstudioapi    0.17.1     2024-10-22 [1] CRAN (R 4.4.1)    sass          0.4.9      2024-03-15 [1] CRAN (R 4.4.0)    sessioninfo   1.2.3      2025-02-05 [1] CRAN (R 4.4.1)    shiny         1.10.0     2024-12-14 [1] CRAN (R 4.4.1)    stringi       1.8.4      2024-05-06 [1] CRAN (R 4.4.0)    stringr       1.5.1      2023-11-14 [1] CRAN (R 4.4.0)    testthat    * 3.2.3      2025-01-13 [1] CRAN (R 4.4.1)    tibble        3.2.1      2023-03-20 [1] CRAN (R 4.4.0)    urlchecker    1.0.1      2021-11-30 [1] CRAN (R 4.4.1)    usethis       3.1.0      2024-11-26 [1] CRAN (R 4.4.1)  P UWBiost561  * 0.0.0.9000 2025-06-06 [?] load_all()    vctrs         0.6.5      2023-12-01 [1] CRAN (R 4.4.0)    waldo         0.6.1      2024-11-07 [1] CRAN (R 4.4.1)    withr         3.0.2      2024-10-28 [1] CRAN (R 4.4.1)    xfun          0.50       2025-01-07 [1] CRAN (R 4.4.1)    xml2          1.3.6      2023-12-04 [1] CRAN (R 4.4.0)    xopen         1.0.1      2024-04-25 [1] CRAN (R 4.4.0)    xtable        1.8-4      2019-04-21 [1] CRAN (R 4.4.1)    yaml          2.3.10     2024-07-26 [1] CRAN (R 4.4.0)   [1] /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_correct_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the correct density, given a set of nodes — compute_correct_density","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"define clique_idx length 1 density 1.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_correct_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"","code":"compute_correct_density(adj_mat, clique_idx)"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_correct_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"adj_mat symmetric matrix values 0 1, 1's along diagonal, row- column-names, 5 50  rows/columns (inclusive). clique_idx numeric vector index numbers corresponding nodes (.e., values 1 nrow(adj_mat)) function deems maximum partial clique. vector duplicate elements, must positive integers, largest value exceed nrow(adj_mat)","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_correct_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the correct density, given a set of nodes — compute_correct_density","text":"numeric, density edges among adj_mat[clique_idx,clique_idx]","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Maximal Partial Clique — compute_maximal_partial_clique1","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique1","text":"Compute Maximal Partial Clique","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique1","text":"","code":"compute_maximal_partial_clique1(adj_mat, alpha, verbose = FALSE)"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique1","text":"adj_mat symmetric 0/1 adjacency matrix 1s diagonal. alpha numeric threshold 0.5 1 indicating required edge density. verbose Logical; whether print debug output. Default FALSE.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique1","text":"list : clique_idx Vector node indices maximal partial clique. edge_density Density subgraph induced clique_idx.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique1.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Maximal Partial Clique — compute_maximal_partial_clique1","text":"","code":"n <- 10 clique_fraction <- 0.5 clique_edge_density <- 0.5 alpha <- 0.9 #generate partial clique graph <- generate_partial_clique(n, clique_fraction, clique_edge_density, seed = NULL) adj_mat <- graph$adj_mat #compute maximal partial clique compute_maximal_partial_clique1(adj_mat, alpha, verbose = FALSE) #> $clique_idx #> [1] 4 5 6 #>  #> $edge_density #> [1] 1 #>"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":null,"dir":"Reference","previous_headings":"","what":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"function runs implementation (dictated number) using inputs adj_mat alpha. example, compute_maximal_partial_clique_master(adj_mat, alpha, number = 5) executes compute_maximal_partial_clique5(adj_mat, alpha).","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"","code":"compute_maximal_partial_clique_master(adj_mat, alpha, number, time_limit = 30)"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"adj_mat symmetric matrix values 0 1, 1's along diagonal, row- column-names, 5 50  rows/columns (inclusive) alpha single numeric (.e., length 1), value 0.5 1 (inclusive) number implementation number use time_limit number seconds implementation times ","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"list clique_idx, edge_density (implementation ) status valid (added function)","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/compute_maximal_partial_clique_master.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Master file for computing maximal partial clique — compute_maximal_partial_clique_master","text":"implementation errors (.e., crashes), output status error. implementation complete within time_limit number seconds (.e., took long), output status timed_out. valid output boolean whether provided clique_idx forms valid partial clique. method status timed_out error, method (default) valid=FALSE.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/generate_partial_clique.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a random adjacency matrix with a partial clique — generate_partial_clique","title":"Generate a random adjacency matrix with a partial clique — generate_partial_clique","text":"Generate random adjacency matrix partial clique","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/generate_partial_clique.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a random adjacency matrix with a partial clique — generate_partial_clique","text":"","code":"generate_partial_clique(n, clique_fraction, clique_edge_density, seed = NULL)"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/generate_partial_clique.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a random adjacency matrix with a partial clique — generate_partial_clique","text":"n Integer. Number nodes graph. clique_fraction Numeric 0 1. Fraction nodes partial clique. clique_edge_density Numeric 0 1. Edge density within partial clique. seed Optional integer. Random seed reproducibility.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/generate_partial_clique.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a random adjacency matrix with a partial clique — generate_partial_clique","text":"list least one element: adj_mat symmetric binary adjacency matrix partial clique.","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/generate_partial_clique.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a random adjacency matrix with a partial clique — generate_partial_clique","text":"","code":"n <- 10 clique_fraction <- 0.5 clique_edge_density <- 0.5 generate_partial_clique(n, clique_fraction, clique_edge_density, seed = NULL) #> $adj_mat #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    1    0    0    0    0    0    0    0    0     0 #>  [2,]    0    1    1    0    0    0    0    1    0     0 #>  [3,]    0    1    1    0    0    0    1    1    0     0 #>  [4,]    0    0    0    1    0    0    0    0    0     0 #>  [5,]    0    0    0    0    1    0    0    0    0     0 #>  [6,]    0    0    0    0    0    1    0    1    0     0 #>  [7,]    0    0    1    0    0    0    1    0    0     0 #>  [8,]    0    1    1    0    0    1    0    1    0     0 #>  [9,]    0    0    0    0    0    0    0    0    1     0 #> [10,]    0    0    0    0    0    0    0    0    0     1 #>"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/maximal_partial_clique_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a simulation of maximal partial clique computing for compute_maximal_partial_clique function — maximal_partial_clique_sim","title":"Run a simulation of maximal partial clique computing for compute_maximal_partial_clique function — maximal_partial_clique_sim","text":"Run simulation maximal partial clique computing compute_maximal_partial_clique function","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/maximal_partial_clique_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a simulation of maximal partial clique computing for compute_maximal_partial_clique function — maximal_partial_clique_sim","text":"","code":"maximal_partial_clique_sim(trials, alpha_vec, n_vec)"},{"path":"https://brebrown6101.github.io/UWBiost561/reference/maximal_partial_clique_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a simulation of maximal partial clique computing for compute_maximal_partial_clique function — maximal_partial_clique_sim","text":"trials number trials ran level per implementation alpha_vec vector alpha levels. Alpha numeric threshold 1 0.5 indicating required edge density n_vec vector n levels. n number nodes graph","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/maximal_partial_clique_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a simulation of maximal partial clique computing for compute_maximal_partial_clique function — maximal_partial_clique_sim","text":"nested list results level trial","code":""},{"path":"https://brebrown6101.github.io/UWBiost561/reference/maximal_partial_clique_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a simulation of maximal partial clique computing for compute_maximal_partial_clique function — maximal_partial_clique_sim","text":"","code":"trials <- 2 alpha_vec <- c(0.50, 0.75, 0.95) n_vec <- c(10, 25, 45) maximal_partial_clique_sim(trials,alpha_vec,n_vec) #> [1] \"Value of alpha: 0.5 Value of n: 10\" #> [1] \"Working on trial: 1\" #> *[1] \"Working on trial: 2\" #> *[1] \"Value of alpha: 0.75 Value of n: 25\" #> [1] \"Working on trial: 1\" #> *[1] \"Working on trial: 2\" #> *[1] \"Value of alpha: 0.95 Value of n: 45\" #> [1] \"Working on trial: 1\" #> *[1] \"Working on trial: 2\" #> * #> $`alpha:0.5n:10` #> $`alpha:0.5n:10`$`Trial: 1` #> $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1` #> $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$status #> [1] \"completed\" #>  #> $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$clique_size #> [1] 10 #>  #> $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$edge_density #> [1] 0.7111111 #>  #> $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$valid #> [1] TRUE #>  #> $`alpha:0.5n:10`$`Trial: 1`$`Implementation: 1`$time #> NULL #>  #>  #>  #> $`alpha:0.5n:10`$`Trial: 2` #> $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1` #> $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$status #> [1] \"completed\" #>  #> $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$clique_size #> [1] 10 #>  #> $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$edge_density #> [1] 0.7111111 #>  #> $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$valid #> [1] TRUE #>  #> $`alpha:0.5n:10`$`Trial: 2`$`Implementation: 1`$time #> NULL #>  #>  #>  #>  #> $`alpha:0.75n:25` #> $`alpha:0.75n:25`$`Trial: 1` #> $`alpha:0.75n:25`$`Trial: 1`$`Implementation: 1` #> $`alpha:0.75n:25`$`Trial: 1`$`Implementation: 1`$status #> [1] \"completed\" #>  #> $`alpha:0.75n:25`$`Trial: 1`$`Implementation: 1`$clique_size #> [1] 24 #>  #> $`alpha:0.75n:25`$`Trial: 1`$`Implementation: 1`$edge_density #> [1] 0.7536232 #>  #> $`alpha:0.75n:25`$`Trial: 1`$`Implementation: 1`$valid #> [1] TRUE #>  #> $`alpha:0.75n:25`$`Trial: 1`$`Implementation: 1`$time #> NULL #>  #>  #>  #> $`alpha:0.75n:25`$`Trial: 2` #> $`alpha:0.75n:25`$`Trial: 2`$`Implementation: 1` #> $`alpha:0.75n:25`$`Trial: 2`$`Implementation: 1`$status #> [1] \"completed\" #>  #> $`alpha:0.75n:25`$`Trial: 2`$`Implementation: 1`$clique_size #> [1] 24 #>  #> $`alpha:0.75n:25`$`Trial: 2`$`Implementation: 1`$edge_density #> [1] 0.7536232 #>  #> $`alpha:0.75n:25`$`Trial: 2`$`Implementation: 1`$valid #> [1] TRUE #>  #> $`alpha:0.75n:25`$`Trial: 2`$`Implementation: 1`$time #> NULL #>  #>  #>  #>  #> $`alpha:0.95n:45` #> $`alpha:0.95n:45`$`Trial: 1` #> $`alpha:0.95n:45`$`Trial: 1`$`Implementation: 1` #> $`alpha:0.95n:45`$`Trial: 1`$`Implementation: 1`$status #> [1] \"completed\" #>  #> $`alpha:0.95n:45`$`Trial: 1`$`Implementation: 1`$clique_size #> [1] 29 #>  #> $`alpha:0.95n:45`$`Trial: 1`$`Implementation: 1`$edge_density #> [1] 0.9507389 #>  #> $`alpha:0.95n:45`$`Trial: 1`$`Implementation: 1`$valid #> [1] TRUE #>  #> $`alpha:0.95n:45`$`Trial: 1`$`Implementation: 1`$time #> NULL #>  #>  #>  #> $`alpha:0.95n:45`$`Trial: 2` #> $`alpha:0.95n:45`$`Trial: 2`$`Implementation: 1` #> $`alpha:0.95n:45`$`Trial: 2`$`Implementation: 1`$status #> [1] \"completed\" #>  #> $`alpha:0.95n:45`$`Trial: 2`$`Implementation: 1`$clique_size #> [1] 27 #>  #> $`alpha:0.95n:45`$`Trial: 2`$`Implementation: 1`$edge_density #> [1] 0.951567 #>  #> $`alpha:0.95n:45`$`Trial: 2`$`Implementation: 1`$valid #> [1] TRUE #>  #> $`alpha:0.95n:45`$`Trial: 2`$`Implementation: 1`$time #> NULL #>  #>  #>  #>"}]

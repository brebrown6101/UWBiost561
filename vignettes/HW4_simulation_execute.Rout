
R version 4.4.2 (2024-10-31) -- "Pile of Leaves"
Copyright (C) 2024 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> rm(list=ls())
> set.seed(10)
> library(UWBiost561)
> 
> imp_numbers = 1:15
> trials = 4
> alpha_vec = c(0.50, 0.75, 0.95)
> n_vec = c(10, 25, 45)
> 
>   stopifnot(length(alpha_vec) == length(n_vec))
> 
>   level_trial_results <- vector("list", length(alpha_vec))
>   # loop over the levels
>   for(i in seq_along(alpha_vec)){
+     alpha <- alpha_vec[i]
+     n <- n_vec[i]
+     print(paste("Value of alpha:", alpha, 'Value of n:', n))
+     level_results <- vector("list", trials)
+ 
+     # loop over the different trials for this level
+     for (trial in 1:trials){
+       print(paste("Working on trial:", trial))
+       set.seed(trial) # to freeze the randomness of adj_mat
+ 
+       # generate the data
+       data <- UWBiost561::generate_partial_clique(n = n, #graph of 10 nodes
+                                                   clique_fraction = 0.9,
+                                                   clique_edge_density = 0.9)
+       adj_mat <- data$adj_mat
+ 
+       trial_results <- vector("list", length(imp_numbers))
+ 
+         result_list <- lapply(imp_numbers, function(imp_number){
+           set.seed(trial)
+           cat('*')
+ 
+             result <- tryCatch({
+               UWBiost561::compute_maximal_partial_clique_master(
+                 adj_mat = adj_mat,
+                 alpha = alpha,
+                 number = imp_number,
+                 time_limit = 30
+               )
+             }, error = function(e) {
+               message(sprintf("❌ Error in imp_number %d, trial %d: %s",
+                               imp_number, trial, e$message))
+               list(clique_idx = NA, edge_density = NA, status = "error", valid = FALSE)
+             })
+ 
+             # Ensure no crash due to bad clique_idx
+             clique_size <- if (!is.null(result$clique_idx) && is.numeric(result$clique_idx)) {
+               length(result$clique_idx)
+             } else {
+               NA
+             }
+           return(list(
+             status = result$status,
+             clique_size = if (!is.null(result$clique_idx)) length(result$clique_idx) else NA,
+             edge_density = result$edge_density,
+             valid = result$valid,
+             time = result$time
+           ))
+         })
+ 
+       trial_results <- result_list
+       names(trial_results) <- paste("Implementation:", imp_numbers)
+       level_results[[trial]] <- trial_results
+     }
+ 
+     names(level_results) <- paste("Trial:", 1:trials)
+     level_trial_results[[i]] <- level_results
+   }
[1] "Value of alpha: 0.5 Value of n: 10"
[1] "Working on trial: 1"
***************[1] "Working on trial: 2"
***************[1] "Working on trial: 3"
*******❌ Error in imp_number 7, trial 3: subscript out of bounds
********[1] "Working on trial: 4"
***************[1] "Value of alpha: 0.75 Value of n: 25"
[1] "Working on trial: 1"
***************[1] "Working on trial: 2"
***************[1] "Working on trial: 3"
***************[1] "Working on trial: 4"
***************[1] "Value of alpha: 0.95 Value of n: 45"
[1] "Working on trial: 1"
***************[1] "Working on trial: 2"
***************[1] "Working on trial: 3"
***************[1] "Working on trial: 4"
***************Warning messages:
1: In combn(1:n, m) : NAs introduced by coercion to integer range
2: In combn(1:n, m) : NAs introduced by coercion to integer range
3: In combn(1:n, m) : NAs introduced by coercion to integer range
4: In combn(1:n, m) : NAs introduced by coercion to integer range
> 
>   names(level_trial_results) <- paste0("alpha:", alpha_vec, "n:", n_vec)
> 
>   date_of_run <- Sys.time()
>   session_info <- devtools::session_info()
> 
>   save(level_trial_results, # save your results
+        alpha_vec,
+        n_vec,# save which alphas you used (for convenience)
+        date_of_run, session_info,
+        file = "~/HW4_simulation.RData")
> 
>   return(level_trial_results)
Error: no function to return from, jumping to top level
Execution halted
